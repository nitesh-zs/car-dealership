// Code generated by MockGen. DO NOT EDIT.
// Source: carAPI/service (interfaces: CarService)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "carAPI/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarService is a mock of CarService interface.
type MockCarService struct {
	ctrl     *gomock.Controller
	recorder *MockCarServiceMockRecorder
}

// MockCarServiceMockRecorder is the mock recorder for MockCarService.
type MockCarServiceMockRecorder struct {
	mock *MockCarService
}

// NewMockCarService creates a new mock instance.
func NewMockCarService(ctrl *gomock.Controller) *MockCarService {
	mock := &MockCarService{ctrl: ctrl}
	mock.recorder = &MockCarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarService) EXPECT() *MockCarServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarService) Create(arg0 model.Car) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarService)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockCarService) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarService)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockCarService) GetAll(arg0 string, arg1 bool) ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCarServiceMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCarService)(nil).GetAll), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockCarService) GetByID(arg0 string) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarServiceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCarService)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockCarService) Update(arg0 model.Car) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCarServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarService)(nil).Update), arg0)
}
