// Code generated by MockGen. DO NOT EDIT.
// Source: carAPI/store (interfaces: EngineStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "carAPI/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEngineStore is a mock of EngineStore interface.
type MockEngineStore struct {
	ctrl     *gomock.Controller
	recorder *MockEngineStoreMockRecorder
}

// MockEngineStoreMockRecorder is the mock recorder for MockEngineStore.
type MockEngineStoreMockRecorder struct {
	mock *MockEngineStore
}

// NewMockEngineStore creates a new mock instance.
func NewMockEngineStore(ctrl *gomock.Controller) *MockEngineStore {
	mock := &MockEngineStore{ctrl: ctrl}
	mock.recorder = &MockEngineStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineStore) EXPECT() *MockEngineStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEngineStore) Create(arg0 model.Engine) (model.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(model.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEngineStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEngineStore)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockEngineStore) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEngineStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEngineStore)(nil).Delete), arg0)
}

// GetByID mocks base method.
func (m *MockEngineStore) GetByID(arg0 string) (model.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(model.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEngineStoreMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEngineStore)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockEngineStore) Update(arg0 model.Engine) (model.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(model.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEngineStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEngineStore)(nil).Update), arg0)
}
