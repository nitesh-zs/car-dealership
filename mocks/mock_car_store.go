// Code generated by MockGen. DO NOT EDIT.
// Source: carAPI/store (interfaces: CarStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "carAPI/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarStore is a mock of CarStore interface.
type MockCarStore struct {
	ctrl     *gomock.Controller
	recorder *MockCarStoreMockRecorder
}

// MockCarStoreMockRecorder is the mock recorder for MockCarStore.
type MockCarStoreMockRecorder struct {
	mock *MockCarStore
}

// NewMockCarStore creates a new mock instance.
func NewMockCarStore(ctrl *gomock.Controller) *MockCarStore {
	mock := &MockCarStore{ctrl: ctrl}
	mock.recorder = &MockCarStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarStore) EXPECT() *MockCarStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarStore) Create(arg0 model.Car) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarStore)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockCarStore) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarStore)(nil).Delete), arg0)
}

// GetByBrand mocks base method.
func (m *MockCarStore) GetByBrand(arg0 string) ([]model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBrand", arg0)
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBrand indicates an expected call of GetByBrand.
func (mr *MockCarStoreMockRecorder) GetByBrand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBrand", reflect.TypeOf((*MockCarStore)(nil).GetByBrand), arg0)
}

// GetByID mocks base method.
func (m *MockCarStore) GetByID(arg0 string) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarStoreMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCarStore)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockCarStore) Update(arg0 model.Car) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCarStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarStore)(nil).Update), arg0)
}
